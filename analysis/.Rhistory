cumu_mean_of_means_corrected_by_child <- mean(cumu_means_corrected_by_child$x)
cumu_se_corrected_by_child <- aggregate(subset.cumu.data$correctedscore, by = c(list(child = subset.cumu.data$child)),FUN = std.error)
cumu_mean_of_se_corrected_by_child <- mean(cumu_se_corrected_by_child$x)
cumu_mean_of_means_corrected_by_child
cumu_mean_of_se_corrected_by_child
subset.cumu.data$recentered_age <- subset.cumu.data$age - 2.5
# Model with the corrected score as dependent variable, recentered age as independent variable (fixed effect), by-child random intercept and random slopes of age.
model_cumu_corrected <- lmer(correctedscore ~ recentered_age + (recentered_age|child), data = subset.cumu.data, control=lmerControl(optimizer = "nloptwrap", optCtrl=list(maxfun=1000000)))
sink(paste0(plot.path,"cumu_corrected_reconstruction.txt"))
summary(model_cumu_corrected)
sink()
summary(model_cumu_corrected)
ranef(model_cumu_corrected )
## Local sample
# Collect data
plot1.local.data <- aggregate(subset.local.data$correctedscore, by = c(list(child = subset.local.data$child),list(age=subset.local.data$age)),FUN = sum)
colnames(plot1.local.data)[3] <- "total_score"
plot1.local.data.temp <- aggregate(subset.local.data$correctedscore, by = c(list(child = subset.local.data$child),list(age = subset.local.data$age)), FUN = function(x){NROW(x)})
colnames(plot1.local.data.temp)[3] <- "total_num_utterances"
plot1.local.data <- merge(plot1.local.data, plot1.local.data.temp, by = c("child","age"))
plot1.local.data$averagescore <- plot1.local.data$total_score/plot1.local.data$total_num_utterances
# Generate plot
plot.local.reconstruction <- ggplot(plot1.local.data,
aes(x=age, y = averagescore, group = child, linetype = child, colour = child)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
coord_cartesian(ylim=(c(-0.5,0.5))) +
xlab("\nAge (years)") +
ylab("Average reconstruction \nscore\n") +
ggtitle("Local sampling") +
geom_hline(yintercept=0) +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
ggsave(paste0(plot.path, "plotlocalrecon.png"), plot = plot.local.reconstruction+theme_apa())
plot.local.reconstruction+theme_apa()
## Cumulative sample
# Collect data
plot1.cumu.data <- aggregate(subset.cumu.data$correctedscore, by = c(list(child = subset.cumu.data$child),list(age=subset.cumu.data$age)),FUN = sum)
colnames(plot1.cumu.data)[3] <- "total_score"
plot1.cumu.data.temp <- aggregate(subset.cumu.data$correctedscore, by = c(list(child = subset.cumu.data$child),list(age = subset.cumu.data$age)), FUN = function(x){NROW(x)})
colnames(plot1.cumu.data.temp)[3] <- "total_num_utterances"
plot1.cumu.data <- merge(plot1.cumu.data, plot1.cumu.data.temp, by = c("child","age"))
plot1.cumu.data$averagescore <- plot1.cumu.data$total_score/plot1.cumu.data$total_num_utterances
# Generate plot
plot.cumu.reconstruction <- ggplot(plot1.cumu.data,
aes(x=age, y = averagescore, group = child, linetype = child, colour = child)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
#scale_colour_manual(name = "Child:", values = groupcolours) +
coord_cartesian(ylim=(c(-0.5,0.5))) +
xlab("\nAge (years)") +
ylab("Average reconstruction \nscore\n") +
ggtitle("Cumulative sampling") +
geom_hline(yintercept=0) +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
ggsave(paste0(plot.path, "plotcumurecon.png"), plot = plot.cumu.reconstruction + theme_apa())
plot.cumu.reconstruction+theme_apa()
## Combine local and cumulative sample
# Function to combine two plot that share a legend
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] +
theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x +
theme(legend.position = "none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend, ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
# Function to remove the x-axis of the right-hand side graph without distorted graph sizes,
# the x-axis is the same as the x-axis of the left-hand side graph
arrange_related_x_axes <- function(..., nrow=NULL, ncol=NULL, as.table=FALSE,
main=NULL, sub=NULL, plot=TRUE) {
dots <- list(...)
n <- length(dots)
if(is.null(nrow) & is.null(ncol)) { nrow = floor(n/2) ; ncol = ceiling(n/nrow)}
if(is.null(nrow)) { nrow = ceiling(n/ncol)}
if(is.null(ncol)) { ncol = ceiling(n/nrow)}
fg <- frameGrob(layout=grid.layout(nrow,ncol))
ii.p <- 1
for(ii.row in seq(1, nrow)){
ii.table.row <- ii.row
if(as.table) {ii.table.row <- nrow - ii.table.row + 1}
for(ii.col in seq(1, ncol)){
ii.table <- ii.p
if(ii.p > n) break
fg <- placeGrob(fg, ggplotGrob(dots[[ii.table]]),
row=ii.table.row, col=ii.col)
ii.p <- ii.p + 1
}
}
if(!is.null(main) | !is.null(sub)){
g <- frameGrob() # large frame to place title(s) and content
g <- packGrob(g, fg)
if (!is.null(main))
g <- packGrob(g, textGrob(main), side="top")
if (!is.null(sub))
g <- packGrob(g, textGrob(sub, gp=gpar(fontsize=30), vjust=-1, hjust=0), side="bottom")
} else {
g <- fg
}
if(plot) grid.draw(g)
invisible(g)
}
# Generate combined plot
plot.local.reconstruction.noxtitle <- plot.cumu.reconstruction +
xlab("\n") +
ylab("Average reconstruction score\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position="none")
plot.cumu.reconstruction.noxtitle <- plot.cumu.reconstruction +
xlab("\n") +
ylab("\n") +
theme(legend.key.width = unit(2, "cm"),
axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.25))
png(paste(plot.path,
"plotbothreconstruction.png", sep=""),
width=1500,height=700,units="px",
bg = "transparent")
grid.newpage()
arrange_related_x_axes(plot.local.reconstruction.noxtitle,
plot.cumu.reconstruction.noxtitle,
nrow=1, ncol = 2, as.table=TRUE,
sub="Age (years)")
dev.off()
plot.local.reconstruction.noxtitle <- plot.local.reconstruction +
xlab("\n") +
ylab("Average reconstruction score\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position="none")
plot.cumu.reconstruction.noxtitle <- plot.cumu.reconstruction +
xlab("\n") +
ylab("\n") +
theme(legend.key.width = unit(2, "cm"),
axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.25))
png(paste(plot.path,
"plotbothreconstruction.png", sep=""),
width=1500,height=700,units="px",
bg = "transparent")
grid.newpage()
arrange_related_x_axes(plot.local.reconstruction.noxtitle,
plot.cumu.reconstruction.noxtitle,
nrow=1, ncol = 2, as.table=TRUE,
sub="Age (years)")
dev.off()
library(ggplot2)
library(lme4)
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(plotrix)
#Plot layout settings
basic.theme <- theme(
panel.background = element_rect(
fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey95"),
panel.grid.minor = element_blank(),
plot.background = element_rect(
fill = "transparent",colour = NA),
legend.background = element_rect(
fill="transparent"),
legend.text = element_text(size=24),
legend.title = element_text(size=30),
legend.key.height = unit(2, "lines"),
legend.key = element_rect(colour = NA, fill = NA),
axis.text.x = element_text(size=30, angle=45, hjust=1),
axis.title.x = element_text(size=30),
axis.text.y = element_text(size=28),
axis.title.y = element_text(size=32),
strip.text = element_text(size=30),
panel.spacing = unit(2, "lines"))
# Set this source file's directory as the working directory
# NOTE: If you want the following command to work, use Source in Rstudio rather than Run
here <- dirname(parent.frame(2)$ofile)
setwd(here)
# Global variables
rawdata.local.path <- "data/main/local/"
rawdata.cumulative.path <- "data/main/cumulative/"
childuttdata.path <- "data/main/childutt/"
suppl.rawdata.local.path <- "data/suppl/local/"
suppl.rawdata.cumulative.path <- "data/suppl/cumulative/"
plot.path <- "plots/"
print.model.output <- "Y"
# Read in local simulation data
filenames <- list.files(path = rawdata.local.path, pattern="*productiontask-modified.csv")
local.data.list <- lapply(paste0(rawdata.local.path,filenames),na.strings=c("NaN","Nan"), stringsAsFactors = FALSE,read.csv)
local.data <- do.call(rbind, local.data.list)
# Prepare data for analyses
local.data$num = 1:nrow(local.data) #overwrite utterance number to avoid double numbers
local.data$age <- gsub("_", ".", local.data$age) #converting age variable to numeric values and months into years
local.data$age <- gsub("6", "5", local.data$age)
local.data$age <- as.numeric(local.data$age)
local.data <- subset(local.data, select = c(2:13))
# Read in cumulative simulation data
filenames <- list.files(path = rawdata.cumulative.path, pattern="*productiontask-modified.csv")
cumu.data.list <- lapply(paste0(rawdata.cumulative.path,filenames),na.strings=c("NaN","Nan"), stringsAsFactors = FALSE,read.csv)
cumu.data <- do.call(rbind, cumu.data.list)
# Prepare data for analyses
cumu.data$num = 1:nrow(cumu.data) #overwrite utterance number to avoid double numbers
cumu.data$age <- gsub("_", ".", cumu.data$age) #converting age variable to numeric values and months into years
cumu.data$age <- gsub("6", "5", cumu.data$age)
cumu.data$age <- as.numeric(cumu.data$age)
cumu.data <- subset(cumu.data, select = c(2:13))
# Read in child utterances from input data
filenames <- list.files(path=childuttdata.path, pattern="*.txt")
childutt.data <- NULL
for (file in filenames){
temp.data <- read.delim(paste0(childuttdata.path, file))
colnames(temp.data) <- c("utterance")
temp.data$child <- unlist(strsplit(unlist(strsplit(file, "_age"))[1],"child"))[2]
temp.data$age <- unlist(strsplit(unlist(strsplit(file, "_age"))[2],".txt"))
childutt.data <- rbind(childutt.data,temp.data)
}
# Prepare data for analyses
childutt.data$age <- gsub("_", ".", childutt.data$age) #converting age variable to numeric values and months into years
childutt.data$age <- gsub("6", "5", childutt.data$age)
childutt.data$age <- as.numeric(childutt.data$age)
childutt.data$numwords <- childutt.data$numwords <- str_count(childutt.data$utterance," ")
## Read in local sample data for suppl materials
filenames <- list.files(path = suppl.rawdata.local.path,pattern="*productiontask_keep_all-modified.csv")
suppl.local.data.list <- lapply(paste0(suppl.rawdata.local.path,filenames),na.strings=c("NaN","Nan"), stringsAsFactors = FALSE,read.csv)
suppl.local.data <- do.call(rbind, suppl.local.data.list)
# Prepare data for analyses
suppl.local.data$num = 1:nrow(suppl.local.data) # overwrite utterance number to avoid double numbers
suppl.local.data$age <- gsub("_", ".", suppl.local.data$age) #converting age variable to numeric values and months into years
suppl.local.data$age <- gsub("6", "5", suppl.local.data$age)
suppl.local.data$age <- as.numeric(suppl.local.data$age)
suppl.local.data <- subset(suppl.local.data, select = c(2:13))
## Read in cumulative sample data for suppl materials
filenames <- list.files(path = suppl.rawdata.cumulative.path,pattern="*productiontask_keep_all-modified.csv")
suppl.cumu.data.list <- lapply(paste0(suppl.rawdata.cumulative.path,filenames),na.strings=c("NaN","Nan"), stringsAsFactors = FALSE,read.csv)
suppl.cumu.data <- do.call(rbind, suppl.cumu.data.list)
# Prepare data for analyses
suppl.cumu.data$num = 1:nrow(suppl.cumu.data) # overwrite utterance number to avoid double numbers
suppl.cumu.data$age <- gsub("_", ".", suppl.cumu.data$age) #converting age variable to numeric values and months into years
suppl.cumu.data$age <- gsub("6", "5", suppl.cumu.data$age)
suppl.cumu.data$age <- as.numeric(suppl.cumu.data$age)
suppl.cumu.data <- subset(suppl.cumu.data, select = c(2:13))
View(local.data)
subset.local.data <- subset(local.data,select=c(1,3,4,5,6,10,11,12))
View(subset.local.data)
View(local.data)
subset.local.data$Y <- ifelse(subset.local.data$reconstructed == "True", 1,0)
subset.local.data <- subset(subset.local.data, subset.local.data$skipped == "False")
local_means_uncorrected_by_child <- aggregate(subset.local.data$Y, by = c(list(child = subset.local.data$child)),FUN = mean)
local_mean_of_means_uncorrected <- mean(local_means_uncorrected_by_child$x)*100
min <- min(local_means_uncorrected_by_child$x)*100
max <- max(local_means_uncorrected_by_child$x)*100
local_mean_of_means_uncorrected
local_means_uncorrected_by_child <- aggregate(subset.local.data$Y, by = c(list(child = subset.local.data$child)),FUN = mean)
local_mean_of_means_uncorrected <- mean(local_means_uncorrected_by_child$x)*100
local_min <- min(local_means_uncorrected_by_child$x)*100
local_max <- max(local_means_uncorrected_by_child$x)*100
local_mean_of_means_uncorrected
local_min
local_max
model_local_uncorrected <- glmer(Y ~ age + (age|child), family=binomial(link = 'logit'), data = subset.local.data)
sink("local_uncorrected_reconstruction.txt")
summary(model_local_uncorrected)
sink()
summary(model_local_uncorrected)
ranef(model_local_uncorrected)
View(cumu.data)
subset.cumu.data <- subset(cumu.data,select=c(1,3,4,5,6,10,11,12))
View(subset.cumu.data)
subset.cumu.data$Y <- ifelse(subset.cumu.data$reconstructed == "True", 1,0)
subset.cumu.data <- subset(subset.cumu.data, subset.cumu.data$skipped == "False")
cumu_means_uncorrected_by_child <- aggregate(subset.cumu.data$Y, by = c(list(child = subset.cumu.data$child)),FUN = mean)
cumu_mean_of_means_uncorrected <- mean(cumu_means_uncorrected_by_child$x)*100
cumu_min <- min(cumu_means_uncorrected_by_child$x)*100
cumu_max <- max(cumu_means_uncorrected_by_child$x)*100
cumu_mean_of_means_uncorrected
cumu_min
cumu_max
model_cumu_uncorrected <- glmer(Y ~ age + (age|child), family=binomial(link = 'logit'), data = subset.cumu.data)
sink("cumu_uncorrected_reconstruction.txt")
summary(model_cumu_uncorrected)
sink()
summary(model_cumu_uncorrected)
ranef(model_cumu_uncorrected)
subset.local.data <- subset(local.data,select=c(1,3,4,5,6,10,11,12))
subset.local.data$Y <- ifelse(subset.local.data$reconstructed == "True", 1,0)
subset.local.data <- subset(subset.local.data, subset.local.data$skipped == "False")
# Descriptive statistics
local_means_uncorrected_by_child <- aggregate(subset.local.data$Y, by = c(list(child = subset.local.data$child)),FUN = mean)
local_mean_of_means_uncorrected <- mean(local_means_uncorrected_by_child$x)*100
local_min <- min(local_means_uncorrected_by_child$x)*100
local_max <- max(local_means_uncorrected_by_child$x)*100
# Model with the binary uncorrected score as dependent variable, age as independent variable (fixed effect), by-child random intercept and random slopes of age.
model_local_uncorrected <- glmer(Y ~ age + (age|child), family=binomial(link = 'logit'), data = subset.local.data)
sink(paste0(plot.path,"local_uncorrected_reconstruction.txt"))
summary(model_local_uncorrected)
sink()
summary(model_local_uncorrected)
ranef(model_local_uncorrected)
# Descriptive statistics
cumu_means_uncorrected_by_child <- aggregate(subset.cumu.data$Y, by = c(list(child = subset.cumu.data$child)),FUN = mean)
cumu_mean_of_means_uncorrected <- mean(cumu_means_uncorrected_by_child$x)*100
cumu_min <- min(cumu_means_uncorrected_by_child$x)*100
cumu_max <- max(cumu_means_uncorrected_by_child$x)*100
cumu_mean_of_means_uncorrected
cumu_min
cumu_max
# Model with the binary uncorrected score as dependent variable, age as independent variable (fixed effect), by-child random intercept and random slopes of age.
model_cumu_uncorrected <- glmer(Y ~ age + (age|child), family=binomial(link = 'logit'), data = subset.cumu.data)
sink(paste0(plot.path,"cumu_uncorrected_reconstruction.txt"))
summary(model_cumu_uncorrected)
sink()
summary(model_cumu_uncorrected)
ranef(model_cumu_uncorrected)
# Collect data for plot
subset.local.data$num_repetition <- ifelse(subset.local.data$repetition == "True", 1,0)
plot1.local.data <- aggregate(subset.local.data$num_repetition, by = c(list(age=subset.local.data$age)),FUN = sum)
colnames(plot1.local.data)[2] <- "total_num_repetitions"
plot1.local.data.temp <- aggregate(subset.local.data$num_repetition, by = c(list(age = subset.local.data$age)), FUN = function(x){NROW(x)})
colnames(plot1.local.data.temp)[2] <- "total_num_utterances"
plot1.local.data<- merge(plot1.local.data, plot1.local.data.temp, by = c("age"))
plot1.local.data$percentages <- (plot1.local.data$total_num_repetitions/plot1.local.data$total_num_utterances)*100
# Generate plot
plot.local.repetitions_perc_collapsed <- ggplot(plot1.local.data,
aes(x=age, y = percentages)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
coord_cartesian(ylim=(c(0,100))) +
xlab("\nAge (years)") +
ylab("Percentage of utterances\n containing repetitions\n") +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# Save plot
ggsave(paste0(plot.path, "plotlocalrep_perc_collapsed.png"), plot = (plot.local.repetitions_perc_collapsed+theme_apa()))
## Cumulative sample
# Collect data for plot
subset.cumu.data$num_repetition <- ifelse(subset.cumu.data$repetition == "True", 1,0)
plot1.cumu.data <- aggregate(subset.cumu.data$num_repetition, by = c(list(age=subset.cumu.data$age)),FUN = sum)
colnames(plot1.cumu.data)[2] <- "total_num_repetitions"
plot1.cumu.data.temp <- aggregate(subset.cumu.data$num_repetition, by = c(list(age = subset.cumu.data$age)), FUN = function(x){NROW(x)})
colnames(plot1.cumu.data.temp)[2] <- "total_num_utterances"
plot1.cumu.data <- merge(plot1.cumu.data, plot1.cumu.data.temp, by = c("age"))
plot1.cumu.data$percentages <- (plot1.cumu.data$total_num_repetitions/plot1.cumu.data$total_num_utterances)*100
# Generate plot
plot.cumulative.repetitions_perc_collapsed <- ggplot(plot1.cumu.data,
aes(x=age, y = percentages)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
#scale_colour_manual(name = "Child:", values = groupcolours) +
coord_cartesian(ylim=(c(0,100))) +
xlab("\nAge (years)") +
ylab("Percentage of utterances\n containing repetitions\n") +
#ggtitle("Cumulative sampling") +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# Save plot
ggsave(paste0(plot.path, "plotcumulativerep_perc_collapsed.png"), plot = (plot.cumulative.repetitions_perc_collapsed+theme_apa()))
# Generate plot
plot.both.repetitions_perc_collapsed <- ggplot() +
geom_line(data = plot1.local.data, aes(x=age, y = percentages, color = "local"), lwd = 2) +
geom_line(data = plot1.cumu.data, aes(x=age, y = percentages, color = "cumulative"), lwd = 2) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
coord_cartesian(ylim=(c(0,50))) +
xlab("\nAge (years)") +
ylab("Percentage of utterances\n containing repetitions\n") +
ggtitle("Chunk repetitions in child utterances") +
guides(color = guide_legend(reverse = TRUE)) +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt"))) +
guides(color=guide_legend(title="Sample"))
# Save plot
ggsave(paste0(plot.path, "plotbothrep_perc_collapsed.png"), plot = (plot.both.repetitions_perc_collapsed+theme_apa()))
plot.both.repetitions_perc_collapsed
## Local sample
# Collect data for plot
plot2.local.data <- aggregate(subset.local.data$Y, by = c(list(child = subset.local.data$child),list(age=subset.local.data$age)),FUN = sum)
colnames(plot2.local.data)[3] <- "total_num_corr_reconstructions"
plot2.local.data.temp <- aggregate(subset.local.data$Y, by = c(list(child = subset.local.data$child),list(age = subset.local.data$age)), FUN = function(x){NROW(x)})
colnames(plot2.local.data.temp)[3] <- "total_num_utterances"
plot2.local.data <- merge(plot2.local.data, plot2.local.data.temp, by = c("child","age"))
plot2.local.data$percentages <- (plot2.local.data$total_num_corr_reconstructions/plot2.local.data$total_num_utterances)*100
# Generate plot
plot.local.reconstruction_perc <- ggplot(plot2.local.data,
aes(x=age, y = percentages, group = child, linetype = child, colour = child)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
#scale_colour_manual(name = "Child:", values = groupcolours) +
coord_cartesian(ylim=(c(0,100))) +
xlab("\nAge (years)") +
ylab("Percentage correctly\n reconstructed utterances\n") +
ggtitle("Local sampling") +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# Save plot
ggsave(paste0(plot.path, "plotlocalrecon_perc.png"), plot = (plot.local.reconstruction_perc+theme_apa()))
plot.local.reconstruction_perc
# Collect data for plot
plot2.cumu.data <- aggregate(subset.cumu.data$Y, by = c(list(child = subset.cumu.data$child),list(age=subset.cumu.data$age)),FUN = sum)
colnames(plot2.cumu.data)[3] <- "total_num_corr_reconstructions"
plot2.cumu.data.temp <- aggregate(subset.cumu.data$Y, by = c(list(child = subset.cumu.data$child),list(age = subset.cumu.data$age)), FUN = function(x){NROW(x)})
colnames(plot2.cumu.data.temp)[3] <- "total_num_utterances"
plot2.cumu.data <- merge(plot2.cumu.data, plot2.cumu.data.temp, by = c("child","age"))
plot2.cumu.data$percentages <- (plot2.cumu.data$total_num_corr_reconstructions/plot2.cumu.data$total_num_utterances)*100
# Generate plot
plot.cumu.reconstruction_perc <- ggplot(plot2.cumu.data,
aes(x=age, y = percentages, group = child, linetype = child, colour = child)) +
geom_line(size = 1.5) + basic.theme + theme(axis.text.x = element_text(size=22)) +
coord_cartesian(ylim=(c(0,100))) +
xlab("\nAge (years)") +
ylab("Percentage correctly\n reconstructed utterances\n") +
ggtitle("Cumulative sampling") +
basic.theme + theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic", hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# Save plot
ggsave(paste0(plot.path, "plotcumurecon_perc.png"), plot = (plot.cumu.reconstruction_perc+theme_apa()))
plot.cumu.reconstruction_perc+theme_apa()
## Combine local and cumulative sample
# Function to combine two plot that share a legend
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] +
theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x +
theme(legend.position = "none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend, ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
# Function to remove the x-axis of the right-hand side graph without distorted graph sizes,
# the x-axis is the same as the x-axis of the left-hand side graph
arrange_related_x_axes <- function(..., nrow=NULL, ncol=NULL, as.table=FALSE,
main=NULL, sub=NULL, plot=TRUE) {
dots <- list(...)
n <- length(dots)
if(is.null(nrow) & is.null(ncol)) { nrow = floor(n/2) ; ncol = ceiling(n/nrow)}
if(is.null(nrow)) { nrow = ceiling(n/ncol)}
if(is.null(ncol)) { ncol = ceiling(n/nrow)}
fg <- frameGrob(layout=grid.layout(nrow,ncol))
ii.p <- 1
for(ii.row in seq(1, nrow)){
ii.table.row <- ii.row
if(as.table) {ii.table.row <- nrow - ii.table.row + 1}
for(ii.col in seq(1, ncol)){
ii.table <- ii.p
if(ii.p > n) break
fg <- placeGrob(fg, ggplotGrob(dots[[ii.table]]),
row=ii.table.row, col=ii.col)
ii.p <- ii.p + 1
}
}
if(!is.null(main) | !is.null(sub)){
g <- frameGrob() # large frame to place title(s) and content
g <- packGrob(g, fg)
if (!is.null(main))
g <- packGrob(g, textGrob(main), side="top")
if (!is.null(sub))
g <- packGrob(g, textGrob(sub, gp=gpar(fontsize=30), vjust=-1, hjust=0), side="bottom")
} else {
g <- fg
}
if(plot) grid.draw(g)
invisible(g)
}
plot.local.reconstruction_perc.noxtitle <- plot.local.reconstruction_perc +
xlab("\n") +
ylab("Percentage correctly\nreconstructed utterances\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position="none")
plot.cumu.reconstruction_perc.noxtitle <- plot.cumu.reconstruction_perc +
xlab("\n") +
ylab("\n") +
theme(legend.key.width = unit(2, "cm"),
axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.25))
png(paste(plot.path,
"plotbothreconstruction_perc.png", sep=""),
width=1500,height=700,units="px",
bg = "transparent")
grid.newpage()
arrange_related_x_axes(plot.local.reconstruction_perc.noxtitle,
plot.cumu.reconstruction_perc.noxtitle,
nrow=1, ncol = 2, as.table=TRUE,
sub="Age (years)")
dev.off()
