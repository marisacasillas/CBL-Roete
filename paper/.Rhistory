plot2.cumu.data$total_num_utterances)*100
plot.cumu.reconstruction_perc <- ggplot(
plot2.cumu.data,
aes(x=age, y = percentages, group = child,
linetype = child, colour = child)) +
geom_line(size = 1.5) +
coord_cartesian(ylim=(c(0,100))) +
xlab("\nAge (years)") +
ylab("Percentage correctly\n reconstructed utterances\n") +
ggtitle("Cumulative sampling") +
basic.theme +
theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic",
hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# ggsave(paste0(
#   plot.path, "plotcumurecon_perc.png"),
#   plot = (plot.cumu.reconstruction_perc+theme_apa()))
## Both input types
plot.local.reconstruction_perc.noxtitle <- plot.local.reconstruction_perc +
xlab("\n") +
ylab("Percentage correctly\nreconstructed utterances\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position="none")
plot.cumu.reconstruction_perc.noxtitle <- plot.cumu.reconstruction_perc +
xlab("\n") +
ylab("\n") +
theme(legend.key.width = unit(2, "cm"),
axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.25))
# png(paste(plot.path,
#   "plotbothreconstruction_perc.png", sep=""),
#   width=1500,height=700,units="px",
#   bg = "transparent")
# grid.newpage()
# arrange_related_x_axes(plot.local.reconstruction_perc.noxtitle,
#                        plot.cumu.reconstruction_perc.noxtitle,
#                        nrow=1, ncol = 2, as.table=TRUE,
#                        sub="Age (years)")
# dev.off()
knitr::include_graphics("images/plotbothreconstruction_perc.png")
knitr::include_graphics("images/plotbothfactors.png")
#---- MODELS AND DESCRIPTIVE DATA ----
# Local input
# Select subset of the data, excluding all skipped utterances,
# and generate binary reconstruction score:
# Yi,j,k for the i-th utterance of the j-th child at age k:
# Y = 1 if utterance is correctly reconstructed, Y = 0 if not.
subset.local.data <- subset(local.data,
select=c(1,3,4,5,6,10,11,12))
subset.local.data$Y <- ifelse(
subset.local.data$reconstructed == "True", 1,0)
subset.local.data <- subset(
subset.local.data, subset.local.data$skipped == "False")
# Descriptive statistics
local_means_corrected_by_child <- aggregate(
subset.local.data$correctedscore,
by = c(list(child = subset.local.data$child)),
FUN = mean)
local_mean_of_means_corrected_by_child <- mean(
local_means_corrected_by_child$x)
local_se_corrected_by_child <- aggregate(
subset.local.data$correctedscore,
by = c(list(child = subset.local.data$child)),
FUN = std.error)
local_mean_of_se_corrected_by_child <- mean(
local_se_corrected_by_child$x)
# Recenter child age
subset.local.data$recentered_age <- subset.local.data$age - 2.5
# Model with the corrected score as dependent variable,
# recentered age as independent variable (fixed effect),
# by-child random intercept and random slopes of age.
model_local_corrected <- lmer(
correctedscore ~ recentered_age + (recentered_age|child),
data = subset.local.data,
control=lmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)))
# sink(paste0(plot.path,"local_corrected_reconstruction.txt"))
# summary(model_local_corrected)
# sink()
# summary(model_local_corrected)
# ranef(model_local_corrected)
# Cumulative input
# Select subset of the data, excluding all skipped utterances,
# and generate binary reconstruction score:
# Yi,j,k for the i-th utterance of the j-th child at age k:
# Y = 1 if utterance is correctly reconstructed, Y = 0 if not.
subset.cumu.data <- subset(cumu.data,
select=c(1,3,4,5,6,10,11,12))
subset.cumu.data$Y <- ifelse(
subset.cumu.data$reconstructed == "True", 1,0)
subset.cumu.data <- subset(
subset.cumu.data, subset.cumu.data$skipped == "False")
# Descriptive statistics
cumu_means_corrected_by_child <- aggregate(
subset.cumu.data$correctedscore,
by = c(list(child = subset.cumu.data$child)),
FUN = mean)
cumu_mean_of_means_corrected_by_child <- mean(
cumu_means_corrected_by_child$x)
cumu_se_corrected_by_child <- aggregate(
subset.cumu.data$correctedscore,
by = c(list(child = subset.cumu.data$child)),
FUN = std.error)
cumu_mean_of_se_corrected_by_child <- mean(
cumu_se_corrected_by_child$x)
# Recenter child age
subset.cumu.data$recentered_age <- subset.cumu.data$age - 2.5
# Model with the corrected score as dependent variable,
# recentered age as independent variable (fixed effect),
# by-child random intercept and random slopes of age.
model_cumu_corrected <- lmer(
correctedscore ~ recentered_age + (recentered_age|child),
data = subset.cumu.data,
control=lmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)))
# sink(paste0(plot.path,"cumu_corrected_reconstruction.txt"))
# summary(model_cumu_corrected)
# sink()
# summary(model_cumu_corrected)
# ranef(model_cumu_corrected )
#---- PLOTS ----
# Length-and-repetition controlled reconstruction score
## Local input
plot1.local.data <- aggregate(
subset.local.data$correctedscore,
by = c(list(child = subset.local.data$child),
list(age=subset.local.data$age)),
FUN = sum)
colnames(plot1.local.data)[3] <- "total_score"
plot1.local.data.temp <- aggregate(
subset.local.data$correctedscore,
by = c(list(child = subset.local.data$child),
list(age = subset.local.data$age)),
FUN = function(x){NROW(x)})
colnames(plot1.local.data.temp)[3] <- "total_num_utterances"
plot1.local.data <- merge(
plot1.local.data, plot1.local.data.temp,
by = c("child","age"))
plot1.local.data$averagescore <- plot1.local.data$total_score/
plot1.local.data$total_num_utterances
plot.local.reconstruction <- ggplot(
plot1.local.data,
aes(x=age, y = averagescore, group = child,
linetype = child, colour = child)) +
geom_line(size = 1.5) +
coord_cartesian(ylim=(c(-0.5,0.5))) +
xlab("\nAge (years)") +
ylab("Average reconstruction \nscore\n") +
ggtitle("Local sampling") +
geom_hline(yintercept=0) +
basic.theme +
theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic",
hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# ggsave(paste0(
#   plot.path, "plotlocalrecon.png"),
#   plot = plot.local.reconstruction+theme_apa())
## Cumulative input
plot1.cumu.data <- aggregate(
subset.cumu.data$correctedscore,
by = c(list(child = subset.cumu.data$child),
list(age=subset.cumu.data$age)),
FUN = sum)
colnames(plot1.cumu.data)[3] <- "total_score"
plot1.cumu.data.temp <- aggregate(
subset.cumu.data$correctedscore,
by = c(list(child = subset.cumu.data$child),
list(age = subset.cumu.data$age)),
FUN = function(x){NROW(x)})
colnames(plot1.cumu.data.temp)[3] <- "total_num_utterances"
plot1.cumu.data <- merge(
plot1.cumu.data, plot1.cumu.data.temp,
by = c("child","age"))
plot1.cumu.data$averagescore <- plot1.cumu.data$total_score/
plot1.cumu.data$total_num_utterances
plot.cumu.reconstruction <- ggplot(
plot1.cumu.data,
aes(x=age, y = averagescore, group = child,
linetype = child, colour = child)) +
geom_line(size = 1.5) +
#scale_colour_manual(name = "Child:", values = groupcolours) +
coord_cartesian(ylim=(c(-0.5,0.5))) +
xlab("\nAge (years)") +
ylab("Average reconstruction \nscore\n") +
ggtitle("Cumulative sampling") +
geom_hline(yintercept=0) +
basic.theme +
theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic",
hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# ggsave(paste0(
#   plot.path, "plotcumurecon.png"),
#   plot = plot.cumu.reconstruction + theme_apa())
## Both input types
plot.local.reconstruction.noxtitle <- plot.local.reconstruction +
xlab("\n") +
ylab("Average reconstruction score\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position="none")
plot.cumu.reconstruction.noxtitle <- plot.cumu.reconstruction +
xlab("\n") +
ylab("\n") +
theme(legend.key.width = unit(2, "cm"),
axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.25))
# png(paste(plot.path,
#           "plotbothreconstruction.png", sep=""),
#     width=1500,height=700,units="px",
#     bg = "transparent")
# grid.newpage()
# arrange_related_x_axes(plot.local.reconstruction.noxtitle,
#                        plot.cumu.reconstruction.noxtitle,
#                        nrow=1, ncol = 2, as.table=TRUE,
#                        sub="Age (years)")
# dev.off()
# Basic descriptive data on child utterances
min <- min(childutt.data$numwords)
max <- max(childutt.data$numwords)
mean <- mean(childutt.data$numwords)
median <- median(childutt.data$numwords)
#---- PLOTS ----
# Utterance length in words
plot1.data <- aggregate(
childutt.data$numwords,
by = c(list(age=childutt.data$age)),
FUN=sum)
colnames(plot1.data)[2] <- "total_uttlength"
plot1.data.temp <- aggregate(
childutt.data$numwords,
by = c(list(age=childutt.data$age)),
FUN = function(x){NROW(x)})
colnames(plot1.data.temp)[2] <- "total_num_utterances"
plot1.data <- merge(
plot1.data,plot1.data.temp, by = c("age"))
plot1.data$averagelength <- (plot1.data$total_uttlength/
plot1.data$total_num_utterances)
plot.childuttlength <- ggplot(
plot1.data,
aes(x=age, y = averagelength)) +
geom_line(size = 1.5) +
xlab("\nAge (years)") +
ylab("Average number of words \n in child utterance\n") +
ggtitle("Child utterance length ") +
basic.theme +
theme(axis.text.x = element_text(size=22)) +
theme(plot.title = element_text(size=30, face = "bold.italic",
hjust = 0.5, margin=margin(b = 30, unit = "pt")))
# ggsave(paste0(
#   plot.path, "plotchilduttlength.png"),
#   plot = (plot.childuttlength+theme_apa()))
# Percent of utterances containing repetitions x age
# (both local and cumulative as seperate lines in graph)
plot.childuttlength.noxtitle <- plot.childuttlength +
xlab("\n") +
ylab("Average number of words\nin child utterance\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18))
plot.both.repetitions_perc_collapsed.noxtitle <-
plot.both.repetitions_perc_collapsed +
xlab("\n") +
ylab("\n\nPercentage of utterances\ncontaining repetitions\n") +
theme(axis.text.x = element_text(size=18),
axis.text.y = element_text(size=18),
legend.position=c(0.75,0.9))
# png(paste(plot.path,
#   "plotbothfactors.png", sep=""),
#   width=1500,height=500,units="px",
#   bg = "transparent")
# grid.newpage()
# arrange_related_x_axes(plot.childuttlength.noxtitle,
#                        plot.both.repetitions_perc_collapsed.noxtitle,
#                        nrow=1, ncol = 2, as.table=TRUE,
#                        sub="Age (years)")
# dev.off()
knitr::include_graphics("images/plotbothreconstruction.png")
knitr::include_graphics("images/plotbothunknown.png")
subset.local.data <- subset(local.data,
select=c(1,2,3,4,5,6,12))
subset.local.data$utterance <- as.character(  subset.local.data$utterance)
subset.local.data$numwords <- str_count(subset.local.data$utterance,"Word")
subset.local.data$Y <- ifelse(subset.local.data$skipped == "True", 1,0)
# Descriptive statistics
local_means_unseen_by_child <- aggregate(
subset.local.data$Y,
by = c(list(child = subset.local.data$child)),
FUN = mean)
local_mean_of_means_unseen <- mean(local_means_unseen_by_child$x)*100
local_se_unseen_by_child <- aggregate(
subset.local.data$Y,
by = c(list(child = subset.local.data$child)),
FUN = std.error)
local_mean_of_se_unseen <- mean(local_se_unseen_by_child$x)*100
# Model with the binary skipped/not skipped as dependent variable,
# age and number of word in an utterance as independent
# variables (fixed effect), by-child random intercept and random slopes of age.
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + numwords,
family=binomial(link = 'logit'),
data = subset.local.data)
summary(model_local_unseenwords)
View(subset.local.data)
table(subset.local.data$numwords)
exp(subset.local.data$numwords)
subset.local.data$expnumwords <- exp(subset.local.data$numwords)
model_local_unseenwords.0 <- model_local_unseenwords
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords,
family=binomial(link = 'logit'),
data = subset.local.data)
table(subset.local.data$expnumwords)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords, to = c(0, 1))
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords, c(0, 1))
table(subset.local.data$expnumwords.01)
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
data = subset.local.data)
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=lmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 100))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 1000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 5000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 10000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 8000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 6000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
relgrad <- with(model_local_unseenwords@optinfo$derivs, solve(Hessian,gradient))
max(abs(relgrad))
subset.local.data$expnumwords.01 <- rescale(subset.local.data$expnumwords,
c(0, 5000))
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "bobyqa",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
model_local_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "Nelder_Mead",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
summary(model_local_unseenwords)
model_local_unseenwords.nlop <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "nloptwrap",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
relgrad <- with(model_local_unseenwords.nlop@optinfo$derivs, solve(Hessian,gradient))
max(abs(relgrad))
subset.cumu.data <- subset(cumu.data,
select=c(1,2,3,4,5,6,12))
subset.cumu.data$utterance <- as.character(subset.cumu.data$utterance)
subset.cumu.data$numwords <- str_count(subset.cumu.data$utterance,"Word")
subset.cumu.data$expnumwords <- exp(subset.local.data$numwords)
subset.cumu.data$expnumwords.01 <- rescale(
subset.cumu.data$expnumwords, c(0, 5000))
subset.cumu.data$Y <- ifelse(subset.cumu.data$skipped == "True", 1,0)
# Descriptive statistics
cumu_means_unseen_by_child <- aggregate(
subset.cumu.data$Y,
by = c(list(child = subset.cumu.data$child)),
FUN = mean)
cumu_mean_of_means_unseen <- mean(cumu_means_unseen_by_child$x)*100
cumu_se_unseen_by_child <- aggregate(
subset.cumu.data$Y,
by = c(list(child = subset.cumu.data$child)),
FUN = std.error)
cumu_mean_of_se_unseen <- mean(cumu_se_unseen_by_child$x)*100
summary(model_local_unseenwords.nlop)
model_cumu_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "Nelder_Mead",
optCtrl=list(maxfun=1000000)),
data = subset.cumu.data)
summary(model_cumu_unseenwords)
model_cumu_unseenwords <- glmer(
Y ~ age + (age|child) + expnumwords.01,
family=binomial(link = 'logit'),
# control=glmerControl(optimizer = "Nelder_Mead",
#   optCtrl=list(maxfun=1000000)),
data = subset.cumu.data)
summary(model_cumu_unseenwords)
expnumwords.01
subset.cumu.data$expnumwords.01
model_cumu_unseenwords <- glmer(
Y ~ age + expnumwords.01 + (age|child),
family=binomial(link = 'logit'),
data = subset.cumu.data)
summary(model_cumu_unseenwords)
write_csv(subset.local.data, "local_input.dataset.csv")
write_csv(subset.cumu.data, "cumulative_input.dataset.csv")
## Local input
# Yi,j,k for the i-th utterance of the j-th child at age k:
# Y = 1 if utterance is skipped, Y = 0 if not skipped.
subset.local.data <- subset(local.data,
select=c(1,2,3,4,5,6,12))
subset.local.data$utterance <- as.character(  subset.local.data$utterance)
subset.local.data$numwords <- str_count(subset.local.data$utterance,"Word")
subset.local.data$expnumwords <- exp(subset.local.data$numwords)
subset.local.data$expnumwords.5k <- rescale(
subset.local.data$expnumwords, c(0, 5000))
subset.local.data$Y <- ifelse(subset.local.data$skipped == "True", 1,0)
# Descriptive statistics
local_means_unseen_by_child <- aggregate(
subset.local.data$Y,
by = c(list(child = subset.local.data$child)),
FUN = mean)
local_mean_of_means_unseen <- mean(local_means_unseen_by_child$x)*100
local_se_unseen_by_child <- aggregate(
subset.local.data$Y,
by = c(list(child = subset.local.data$child)),
FUN = std.error)
local_mean_of_se_unseen <- mean(local_se_unseen_by_child$x)*100
# Model with the binary skipped/not skipped as dependent variable,
# age and number of word in an utterance as independent
# variables (fixed effect), by-child random intercept and random slopes of age.
model_local_unseenwords <- glmer(
Y ~ age + expnumwords.5k + (age|child),
family=binomial(link = 'logit'),
control=glmerControl(optimizer = "Nelder_Mead",
optCtrl=list(maxfun=1000000)),
data = subset.local.data)
summary(model_local_unseenwords)
subset.cumu.data <- subset(cumu.data,
select=c(1,2,3,4,5,6,12))
subset.cumu.data$utterance <- as.character(subset.cumu.data$utterance)
subset.cumu.data$numwords <- str_count(subset.cumu.data$utterance,"Word")
subset.cumu.data$expnumwords <- exp(subset.local.data$numwords)
subset.cumu.data$expnumwords.5k <- rescale(
subset.cumu.data$expnumwords, c(0, 5000))
subset.cumu.data$Y <- ifelse(subset.cumu.data$skipped == "True", 1,0)
# Descriptive statistics
cumu_means_unseen_by_child <- aggregate(
subset.cumu.data$Y,
by = c(list(child = subset.cumu.data$child)),
FUN = mean)
cumu_mean_of_means_unseen <- mean(cumu_means_unseen_by_child$x)*100
cumu_se_unseen_by_child <- aggregate(
subset.cumu.data$Y,
by = c(list(child = subset.cumu.data$child)),
FUN = std.error)
cumu_mean_of_se_unseen <- mean(cumu_se_unseen_by_child$x)*100
# Model with the binary skipped/not skipped as dependent variable,
# age and number of word in an utterance as independent
# variables (fixed effect), by-child random intercept and random slopes of age.
model_cumu_unseenwords <- glmer(
Y ~ age + expnumwords.5k + (age|child),
family=binomial(link = 'logit'),
data = subset.cumu.data)
summary(model_cumu_unseenwords)
relgrad <- with(model_local_unseenwords@optinfo$derivs, solve(Hessian,gradient))
max(abs(relgrad))
subset.local.data <- read.csv("local_input.dataset.csv")
