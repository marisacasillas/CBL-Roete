transcription.data <- transcription.data[,c(3:8,12,13)]
colnames(transcription.data) <- c("begin_min","begin_sec","begin","end_min","end_sec","end","transcript","file")
transcription.data$segment <- substring(transcription.data$file, 114,133)
transcription.data$segment <- str_replace(transcription.data$segment,"e","")
transcription.data$segment <- str_replace(transcription.data$segment,"-IR-IR.","")
transcription.data$segment <- str_replace(transcription.data$segment,"-IR-IR","")
# compute number of syllables from transcript
temp <- strsplit(transcription.data$transcript," ")
syllable_counts = c()
for(i in c(1:length(temp))){
utt <- temp[i][[1]]
n_syll <- 0
for(word in utt){
# words without vowels are 1 syllable (incl. "?" in transcription)
if (length(grep("[aeiou]",word)) == 0){
n_syll <- n_syll + 1
}
# count number of vowel(clusters)
else{
vowels <- unlist(gregexpr("[aeiou]",word))
indices <- diff(vowels)
n_syll <- n_syll + 1
#only one vowel present
previous <- 0
if(!(length(indices) == 0)){
for(j in c(1:length(indices))){
if(!(indices[j]==1) && !(previous ==1)){
n_syll <- n_syll+1
}
}
}
}
}
syllable_counts <- c(syllable_counts,n_syll)#,after = length(syllable_counts))
## TESTING CODE ##
#print(utt)
#print(n_syll)
#print(syllable_counts)
}
transcription.data$ref_n_syllables <- syllable_counts
## Format speechrate data ##
speechrate.utt.data$child <- substring(speechrate.utt.data$filename, 4,5)
speechrate.utt.data$age <- substring(speechrate.utt.data$filename, 1,2)
speechrate.utt.data$segment <- substring(speechrate.utt.data$filename,1,14)
speechrate.utt.data$segment <- sub("\\_$","", speechrate.utt.data$segment)
speechrate.utt.data[494:526,]$segment<- substring(speechrate.utt.data[494:526,]$segment,1,12)
speechrate.utt.data[8346:8400,]$segment<- substring(speechrate.utt.data[8346:8400,]$segment,1,12)
speechrate.utt.data$begin <- substring(speechrate.utt.data$filename,14,21)
speechrate.utt.data[1099:1130,]$begin<- substring(speechrate.utt.data[1099:1130,]$filename,16,22)
speechrate.utt.data[2462:2512,]$begin<- substring(speechrate.utt.data[2462:2512,]$filename,16,22)
speechrate.utt.data$begin <- sub("\\_([0-9])*$","", speechrate.utt.data$begin)
speechrate.utt.data$begin <- sub("_","", speechrate.utt.data$begin)
speechrate.utt.data$begin <- sub("^0+([0-9]*)$","\\1",speechrate.utt.data$begin)
speechrate.utt.data$end <- substring(speechrate.utt.data$filename,20,30)
speechrate.utt.data$end <- sub('.*_', '', speechrate.utt.data$end)
speechrate.utt.data$end <- sub("^0+([0-9]*)$","\\1",speechrate.utt.data$end)
### Match transcription data with speechrate data ###
#Merge the rows in speechrate.utt.data and transcription.data for which the file, and both the begin and end-time of the utterance match.
all.data <- merge(speechrate.utt.data,transcription.data, by = c("segment","begin","end"))
# ### TESTING CODE FOR CHECKING ERRORS PER SEGMENT
# subset1 <- subset(transcription.data, segment == "08_53_chunk125")
# subset2 <- subset(speechrate.utt.data, segment == "08_53_chunk125")
# #subset2$begin <- substring(subset2$filename,14,21)
# subset2$begin <- sub("\\_([0-9])*$","", subset2$begin)
# subset2$begin <- sub("_","", subset2$begin)
# subset2$begin <- sub("^0+([0-9]*)$","\\1",subset2$begin)
# test_data <- merge(subset1,subset2,by=c("segment","begin","end"))
### Compute accuracy of speechrate data: Cohen's kappa ###
comparison_withF0prune <- data.frame(all.data$syllable_count,all.data$ref_n_syllables)
comparison_noF0prune <- data.frame(all.data$syllable_count_noF0prune,all.data$ref_n_syllables)
#kappa2(comparison_withF0prune,"unweighted")
#kappa2(comparison_noF0prune,"unweighted")
kappa2(comparison_withF0prune,"equal")
kappa2(comparison_noF0prune,"equal")
#Standard linear correlation
cor.test(comparison_withF0prune$all.data.syllable_count,comparison_withF0prune$all.data.ref_n_syllables)
cor.test(comparison_noF0prune$all.data.syllable_count_noF0prune, comparison_noF0prune$all.data.ref_n_syllables)
#Root mean sqaured relative error rate: relative error: abs((est-rel))/ref*100, rmsre:
#Remove two data points for which the transcription contained zero words, for calculation
comparison_withF0prune <- comparison_withF0prune[-c(15,451),]
comparison_noF0prune <- comparison_noF0prune[-c(15,451),]
rel_errorrate_withF0prune <- mean(((abs(comparison_withF0prune$all.data.syllable_count-comparison_withF0prune$all.data.ref_n_syllables))/comparison_withF0prune$all.data.ref_n_syllables)*100)
rel_errorrate_noF0prune <- mean(((abs(comparison_noF0prune$all.data.syllable_count-comparison_noF0prune$all.data.ref_n_syllables))/comparison_noF0prune$all.data.ref_n_syllables)*100)
# Set working directory and output directory, and plot details
library("dplyr")
library("lme4")
library("ggplot2")
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
#Set working directory
#"~/Downloads/"
data.path <- "C:/Users/ingroe/Downloads/" #"/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/03-raw_data/04-spreadsheets/"
plot.path <- "C:/Users/ingroe/Downloads/" #"/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/04-analysis/"
#Set working directory
#For on linux: "~/Downloads/"
data.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/03-raw_data/04-spreadsheets/"
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/04-analysis/"
# Format data into dataframe-format
speechrate.files <- list.files(path=data.path, pattern="results.csv")
speechrate.utt.data <- do.call("rbind", lapply(speechrate.files, function(x) read.csv(paste(data.path,x, sep=''),
stringsAsFactors = FALSE)))
# Compute speech rate per utterance, with and without F0-pruning
speechrate.utt.data$rate <- speechrate.utt.data$syllable_count / speechrate.utt.data$utt_duration
speechrate.utt.data$rate_noF0prune <- speechrate.utt.data$syllable_count_noF0prune / speechrate.utt.data$utt_duration
# Descriptive statistics over all utterances; average speech rate and sd, per child per age
speechrate.utt.data$child <- substring(speechrate.utt.data$filename, 4,5)
speechrate.utt.data$age <- substring(speechrate.utt.data$filename, 1,2)
speechrate.utt.data$count <- 1
speechrate.utt.data$segment <- substring(speechrate.utt.data$filename,7,14)
total_speech <- aggregate(speechrate.utt.data$utt_duration, by = c(list(child = speechrate.utt.data$child), list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=sum)
mean_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=mean)
sd_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=sd)
mean_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=mean)
sd_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=sd)
num_utterances <- aggregate(speechrate.utt.data$count, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=sum)
average_utt <- aggregate(speechrate.utt.data$utt_duration, by = c(list(child = speechrate.utt.data$child), list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=mean)
sd_utt <-   aggregate(speechrate.utt.data$utt_duration, by = c(list(child = speechrate.utt.data$child), list(age=speechrate.utt.data$age), list(segment = speechrate.utt.data$segment)),FUN=sd)
speechrate.data <- merge(mean_speechrate, sd_speechrate,by=c("child","age", "segment"))
speechrate.data <- merge(speechrate.data,mean_speechrate_noF0prune,by=c("child","age","segment"))
speechrate.data <- merge(speechrate.data,sd_speechrate_noF0prune,by=c("child","age","segment"))
speechrate.data <- merge(speechrate.data,num_utterances,by=c("child","age","segment"))
speechrate.data <- merge(speechrate.data,total_speech,by=c("child","age","segment"))
speechrate.data <- merge(speechrate.data,average_utt,by=c("child","age","segment"))
speechrate.data <- merge(speechrate.data,sd_utt,by=c("child","age","segment"))
colnames(speechrate.data) <- c("child","age","segment","mean","sd","mean_noF0prune","sd_noF0prune","num_utt", "total_speech","average_utt","sd_utt")
#Preprocess: Identify and remove all children for which we don't have all 3 data points
for (c in c(1:56)){
# Adjusting participant numbers
if (c < 10){
i <- paste("0",toString(c), sep = '')
}else{
i <- c
}
temp <-speechrate.data[speechrate.data$child == i,1:7]
n_datapoints <- length(unique(temp$age))
if(n_datapoints < 3 | any(speechrate.data$num_utt[speechrate.data$child == i] < 10)){
speechrate.data <- subset(speechrate.data, child != i)
speechrate.utt.data <- subset(speechrate.utt.data, child != i)
}
}
n_segments <- nrow(speechrate.data)
n_segments_for_check <- ceiling(n_segments/10)
View(speechrate.data)
total_speech <- 0
temp <- speechrate.data$total_speech
temp
total_speech <- sum(temp)
total_speech
total_speech/60
total <- sum(speechrate.data$total_speech)
total_min <- total/60
agg.data <-aggregate(speechrate.data, by=list(total_speech),
FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(total_speech),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=total_speech,FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=c(total_speech),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(child,total_speech),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(speechrate.data$total_speech),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(speechrate.data$child,speechrate.data$total_speech),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(speechrate.data$child),FUN=sum, na.rm=TRUE)
agg.data <-aggregate(speechrate.data, by=list(speechrate.data$child),FUN=sum)
speechrate.data
speechrate.data$child
agg = aggregate(speechrate.data, by = list(speechrate.data$child), FUN = mean)
agg
agg = aggregate(speechrate.data, by = list(speechrate.data$child), FUN = sum)
agg.data <-aggregate(speechrate.data$total_speech, by=list(speechrate.data$child),FUN=sum)
agg.data
min(agg.data$total_speech)
min(agg.data$x)
min <- min(agg.data$x)/60
min
max <- max(agg.data$x)/60
agg.data$child
agg.data$Group.1
unique(speechrate.data$child)
length(unique(speechrate.data$child))
### Speech rate data analysis
# Set working directory and output directory, and plot details
library("dplyr")
library("lme4")
library("ggplot2")
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(lmerTest)
library(yarrr)
library(Hmisc)
#Plot layout settings
basic.theme <- theme(
panel.background = element_rect(
fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey95"),
panel.grid.minor = element_blank(),
plot.background = element_rect(
fill = "transparent",colour = NA),
legend.background = element_rect(
fill="transparent"),
legend.text = element_text(size=24),
legend.title = element_text(size=30),
legend.key.height = unit(2, "lines"),
legend.key = element_rect(colour = NA, fill = NA),
axis.text.x = element_text(size=30, angle=45, hjust=1),
axis.title.x = element_text(size=30),
axis.text.y = element_text(size=28),
axis.title.y = element_text(size=32),
strip.text = element_text(size=30),
panel.spacing = unit(2, "lines"))
# Read in speech rate data from files
#"~/Downloads/"  C:/Users/ingroe/Downloads/
data.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/03-raw_data/04-spreadsheets/"
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/04-analysis/"
speechrate.files <- list.files(path=data.path, pattern="results.csv")
# Format data into dataframe-format
speechrate.utt.data <- do.call("rbind", lapply(speechrate.files, function(x) read.csv(paste(data.path,x, sep=''),
stringsAsFactors = FALSE)))
# Compute speech rate per utterance, with and without F0-pruning
speechrate.utt.data$rate <- speechrate.utt.data$syllable_count / speechrate.utt.data$utt_duration
speechrate.utt.data$rate_noF0prune <- speechrate.utt.data$syllable_count_noF0prune / speechrate.utt.data$utt_duration
# Descriptive statistics over all utterances; average speech rate and sd, per child per age
speechrate.utt.data$child <- substring(speechrate.utt.data$filename, 4,5)
speechrate.utt.data$age <- substring(speechrate.utt.data$filename, 1,2)
speechrate.utt.data$count <- 1
mean_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=mean)
sd_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sd)
mean_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=mean)
sd_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sd)
num_utterances <- aggregate(speechrate.utt.data$count, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sum)
speechrate.data <- merge(mean_speechrate, sd_speechrate,by=c("child","age"))
speechrate.data <- merge(speechrate.data,mean_speechrate_noF0prune,by=c("child","age"))
speechrate.data <- merge(speechrate.data,sd_speechrate_noF0prune,by=c("child","age"))
speechrate.data <- merge(speechrate.data,num_utterances,by=c("child","age"))
colnames(speechrate.data) <- c("child","age","mean","sd","mean_noF0prune","sd_noF0prune","num_utt")
#Preprocess: Identify and remove all children for which we don't have all 3 data points, or for which
#we don't have at least 10 utterances in each data point
for (c in c(1:56)){
# Adjusting participant numbers
if (c < 10){
i <- paste("0",toString(c), sep = '')
}else{
i <- c
}
temp <-speechrate.data[speechrate.data$child == i,1:7]
n_datapoints <- nrow(temp)
num_utterances <- speechrate.data$num_utt[speechrate.data$child == i]
if (any(num_utterances<10) | n_datapoints < 3){
print("remove")
print(i)
speechrate.data <- subset(speechrate.data, child != i)
speechrate.utt.data <- subset(speechrate.utt.data, child != i)
}
}
## Add in CDI data here
CDI.files <- list.files(path=data.path, pattern="scores.csv")
# Format data into dataframe-format
CDI.all.data <- do.call("rbind", lapply(CDI.files, function(x) read.csv(paste(data.path,x, sep=''),
stringsAsFactors = FALSE)))
CDI.all.data$child <- c('01','02','03','04','05','06','07','08','09','10', '11','12', '13','14','15','16','17','18','19','20','21','22','23',
'24','25','26', '27', '28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45',
'46','47','48','49','50','51','52','53','54','55','56',NA,NA)
#Preprocess CDI data
CDI.data <- CDI.all.data[c(1,2,9,37,156:179,183,184)]
CDI.data$sibling <- ifelse(CDI.data$Broertjes.zusjes..bij.Prod08. != "" | CDI.data$Broertjes.zusjes..bij.Prod16. != '','True','False')
CDI.data$spraak8 <- ifelse(CDI.data$NCDI1RuweScoreProd8mnd > 0, "True", "False")
CDI.data$spraak12 <-ifelse(CDI.data$NCDI1RuweScoreProd12mnd > 0, "True", "False")
CDI.data$spraak16 <- ifelse(CDI.data$NCDI1RuweScoreProd16mnd > 0, "True", "False")
CDI.data$spraak <- ifelse(CDI.data$spraak8, "8", ifelse(CDI.data$spraak12, "12","16"))
CDI.data <- CDI.data[c(1,2,5:31,35)]
# Link CDI data to speech rate data
all.utt.data <- merge(CDI.data,speechrate.utt.data, by="child", all = FALSE)
all.data <- merge(CDI.data,speechrate.data, by="child", all = FALSE)
all.utt.data$NCDI1RuweScorePerc12mnd <- strtoi(all.utt.data$NCDI1RuweScorePerc12mnd)
all.utt.data$NCDI1RuweScoreProd12mnd <- strtoi(all.utt.data$NCDI1RuweScoreProd12mnd)
all.data$NCDI1RuweScorePerc12mnd <- strtoi(all.data$NCDI1RuweScorePerc12mnd)
all.data$NCDI1RuweScoreProd12mnd <- strtoi(all.data$NCDI1RuweScoreProd12mnd)
# Determine basic info about children
n_children <- length(unique(all.data$child))
n_sexe <- table(all.data$Geslacht)/3
n_segments <- nrow(speechrate.data)
### Speech rate data analysis
# Set working directory and output directory, and plot details
library("dplyr")
library("lme4")
library("ggplot2")
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(lmerTest)
library(yarrr)
library(Hmisc)
#Plot layout settings
basic.theme <- theme(
panel.background = element_rect(
fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey95"),
panel.grid.minor = element_blank(),
plot.background = element_rect(
fill = "transparent",colour = NA),
legend.background = element_rect(
fill="transparent"),
legend.text = element_text(size=24),
legend.title = element_text(size=30),
legend.key.height = unit(2, "lines"),
legend.key = element_rect(colour = NA, fill = NA),
axis.text.x = element_text(size=30, angle=45, hjust=1),
axis.title.x = element_text(size=30),
axis.text.y = element_text(size=28),
axis.title.y = element_text(size=32),
strip.text = element_text(size=30),
panel.spacing = unit(2, "lines"))
# Read in speech rate data from files
#"~/Downloads/"  C:/Users/ingroe/Downloads/
data.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/03-raw_data/04-spreadsheets/"
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/speechrate_roete/04-analysis/"
speechrate.files <- list.files(path=data.path, pattern="results.csv")
# Format data into dataframe-format
speechrate.utt.data <- do.call("rbind", lapply(speechrate.files, function(x) read.csv(paste(data.path,x, sep=''),
stringsAsFactors = FALSE)))
# Compute speech rate per utterance, with and without F0-pruning
speechrate.utt.data$rate <- speechrate.utt.data$syllable_count / speechrate.utt.data$utt_duration
speechrate.utt.data$rate_noF0prune <- speechrate.utt.data$syllable_count_noF0prune / speechrate.utt.data$utt_duration
# Descriptive statistics over all utterances; average speech rate and sd, per child per age
speechrate.utt.data$child <- substring(speechrate.utt.data$filename, 4,5)
speechrate.utt.data$age <- substring(speechrate.utt.data$filename, 1,2)
speechrate.utt.data$count <- 1
mean_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=mean)
sd_speechrate <- aggregate(speechrate.utt.data$rate, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sd)
mean_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=mean)
sd_speechrate_noF0prune <- aggregate(speechrate.utt.data$rate_noF0prune, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sd)
num_utterances <- aggregate(speechrate.utt.data$count, by = c(list(child = speechrate.utt.data$child),list(age=speechrate.utt.data$age)),FUN=sum)
speechrate.data <- merge(mean_speechrate, sd_speechrate,by=c("child","age"))
speechrate.data <- merge(speechrate.data,mean_speechrate_noF0prune,by=c("child","age"))
speechrate.data <- merge(speechrate.data,sd_speechrate_noF0prune,by=c("child","age"))
speechrate.data <- merge(speechrate.data,num_utterances,by=c("child","age"))
colnames(speechrate.data) <- c("child","age","mean","sd","mean_noF0prune","sd_noF0prune","num_utt")
n_children <- length(unique(speechrate.data$child))
n_children
n_segments <- nrow(speechrate.data)
n_segments
#Preprocess: Identify and remove all children for which we don't have all 3 data points, or for which
#we don't have at least 10 utterances in each data point
for (c in c(1:56)){
# Adjusting participant numbers
if (c < 10){
i <- paste("0",toString(c), sep = '')
}else{
i <- c
}
temp <-speechrate.data[speechrate.data$child == i,1:7]
n_datapoints <- nrow(temp)
num_utterances <- speechrate.data$num_utt[speechrate.data$child == i]
if (any(num_utterances<10) | n_datapoints < 3){
print("remove")
print(i)
speechrate.data <- subset(speechrate.data, child != i)
speechrate.utt.data <- subset(speechrate.utt.data, child != i)
}
}
n_segments <- nrow(speechrate.data)
n_children
n_children <- length(unique(speechrate.data$child))
n_children
n_segments <- nrow(speechrate.data)
n_segments
library(readr)
c_corpusProvidence_childAlex_age2_0_productiontask_modified <- read_csv("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-raw_data/03-analysis_scripts/CBL-master/results/skipped/c_corpusProvidence_childAlex_age2_0_productiontask-modified.csv")
View(c_corpusProvidence_childAlex_age2_0_productiontask_modified)
-0.03390155 < -0.001389854
library(readr)
l_corpusProvidence_childViolet_age4_0_productiontask_modified <- read_csv("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-raw_data/03-analysis_scripts/CBL-master/results/skipped/l_corpusProvidence_childViolet_age4_0_productiontask-modified.csv")
View(l_corpusProvidence_childViolet_age4_0_productiontask_modified)
library(readr)
l_corpusProvidence_childNaima_age3_0_productiontask_keep_all_modified <- read_csv("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-raw_data/03-analysis_scripts/CBL-master/results/not_skipped/l_corpusProvidence_childNaima_age3_0_productiontask_keep_all-modified.csv")
View(l_corpusProvidence_childNaima_age3_0_productiontask_keep_all_modified)
-8.368250e-03 > -1.053605e-01
-2.755732e-07 > -5.511465e-07
-2.087676e-09 > -4.175351e-09
-2.755732e-07 > -1.102293e-06
#Loading packages and setting paths
library(ggplot2)
library(lme4)
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(plotrix)
#Plot layout settings
basic.theme <- theme(
panel.background = element_rect(
fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey95"),
panel.grid.minor = element_blank(),
plot.background = element_rect(
fill = "transparent",colour = NA),
legend.background = element_rect(
fill="transparent"),
legend.text = element_text(size=24),
legend.title = element_text(size=30),
legend.key.height = unit(2, "lines"),
legend.key = element_rect(colour = NA, fill = NA),
axis.text.x = element_text(size=30, angle=45, hjust=1),
axis.title.x = element_text(size=30),
axis.text.y = element_text(size=28),
axis.title.y = element_text(size=32),
strip.text = element_text(size=30),
panel.spacing = unit(2, "lines"))
##Set colours
#groupcolours <- c("deepskyblue2","aquamarine3","aquamarine4","deepskyblue","deepskyblue3","lightskyblue")
#load the production task data
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/")
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/"
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/")
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/"
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test")
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/")
#Loading packages and setting paths
library(ggplot2)
library(lme4)
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(plotrix)
#Plot layout settings
basic.theme <- theme(
panel.background = element_rect(
fill = "transparent",colour = NA),
panel.grid.major = element_line(colour = "grey95"),
panel.grid.minor = element_blank(),
plot.background = element_rect(
fill = "transparent",colour = NA),
legend.background = element_rect(
fill="transparent"),
legend.text = element_text(size=24),
legend.title = element_text(size=30),
legend.key.height = unit(2, "lines"),
legend.key = element_rect(colour = NA, fill = NA),
axis.text.x = element_text(size=30, angle=45, hjust=1),
axis.title.x = element_text(size=30),
axis.text.y = element_text(size=28),
axis.title.y = element_text(size=32),
strip.text = element_text(size=30),
panel.spacing = unit(2, "lines"))
##Set colours
#groupcolours <- c("deepskyblue2","aquamarine3","aquamarine4","deepskyblue","deepskyblue3","lightskyblue")
#load the production task data
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/")
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/"
getwd()
#Loading packages and setting paths
library(ggplot2)
library(lme4)
library(grid)
library(gridExtra)
library(stringr)
library(jtools)
library(lattice)
library(plotrix)
#load the production task data
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/")
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/CBL-master/results/test/"
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/")
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-analysis_scripts/")
setwd("/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-raw_data/03-analysis_scripts/CBL-master/results/test/")
plot.path <- "/Volumes/ladd/workspaces/ld-ingroe/projects/modeling_roete/03-raw_data/03-analysis_scripts/CBL-master/results/test/"
filenames <- list.files(pattern="*productiontask_keep_all-modified2.csv")
filenames
for(file in filenames){
data <- read.csv(file,na.strings=c("NaN","Nan"), stringsAsFactors = FALSE)
#data <- subset(data, select = c(2:14))
#new_filename <- str.replace(file,"-modified2","")
#write.csv(data, new_filename)
}
data
View(data)
#TODO: change from here
for(file in filenames){
data <- read.csv(file,na.strings=c("NaN","Nan"), stringsAsFactors = FALSE)
data <- subset(data, select = c(2:14))
#new_filename <- str.replace(file,"-modified2","")
#write.csv(data, new_filename)
}
for(file in filenames){
data <- read.csv(file,na.strings=c("NaN","Nan"), stringsAsFactors = FALSE)
data <- subset(data, select = c(2:13))
#new_filename <- str.replace(file,"-modified2","")
#write.csv(data, new_filename)
}
#TODO: change from here
for(file in filenames){
data <- read.csv(file,na.strings=c("NaN","Nan"), stringsAsFactors = FALSE)
data <- subset(data, select = c(2:13))
new_filename <- str.replace(file,"-modified2","")
#write.csv(data, new_filename)
}
#TODO: change from here
for(file in filenames){
data <- read.csv(file,na.strings=c("NaN","Nan"), stringsAsFactors = FALSE)
data <- subset(data, select = c(2:13))
new_filename <- str_replace(file,"-modified2","")
#write.csv(data, new_filename)
}
new_filename
